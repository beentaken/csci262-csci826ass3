#include "Stats.h"
#include <stdlib.h>
#include <string>
using namespace std;
Stats::Stats()
{
    //ctor
	data.type = "";
	data.numberMean = 0;
        data.numberStandardDeviation = 0;
        data.speedMean = 0;
        data.speedStandardDeviation = 0;
}

Stats::~Stats()
{
    //dtor
}
/*
Stats::Stats(const Stats& other)
{
    //copy ctor
}*/

Stats& Stats::operator=(const Stats& rhs)
{
    if (this == &rhs) return *this; // handle self assignment
    //assignment operator
    return *this;
}
/*
void Stats::InitializeTypes(int Number)
{
    Types = new vehicleType[Number];
}*/
/*int Stats::GetvehicleTypesMonitored() const
{
	return vehicleTypesMonitored;
}
void Stats::SetvehicleTypesMonitored(int val)
{
	vehicleTypesMonitored = val;
	return;
}*/
string Stats::getType() const
{
	return data.type;
}

float Stats::getNumberMean() const
{
	return data.numberMean;
}
float Stats::getNumberStandardDeviation() const
{
	return data.numberStandardDeviation;
}
float Stats::getSpeedMean() const
{
	return data.speedMean;
}
float Stats::getSpeedStandardDeviation() const
{
	return data.speedStandardDeviation;
}

void Stats::setType(string type)
{
	data.type = type;
}
void Stats::setNumberMean(float numberMean)
{
	this->data.numberMean = numberMean;
}
void Stats::setNumberStandardDeviation(float numberStandardDeviation)
{
	this->data.numberStandardDeviation = numberStandardDeviation;
}
void Stats::setSpeedMean(float speedMean)
{
	this->data.speedMean = speedMean;
}
void Stats::setSpeedStandardDeviation(float speedStandardDeviation)
{
	this->data.speedStandardDeviation = speedStandardDeviation;
}

ostream& operator << (ostream& out, const Stats& data)
{
	out << data.getType();
        out << ":";
        out << data.getNumberMean();
        out << ":";
        out << data.getNumberStandardDeviation();
        out << ":";
        out << data.getSpeedMean();
        out << ":";
        out << data.getSpeedStandardDeviation();
        return out;
}
istream& operator >> (istream& in, Stats &data)
{
	string type;
	string numberMean;
        string numberStandardDeviation;
        string speedMean;
        string speedStandardDeviation;
        string rubbish;
        
        getline(in, type,':');
        if (type[0] == '\n')
        	type.erase (str.begin(), str.begin() + 1);
        data.setType(type);
		
        getline(in, numberMean,':');
        data.setNumberMean(atof (numberMean.c_str()));

        getline(in, numberStandardDeviation,':');
        data.setNumberStandardDeviation(atof (numberStandardDeviation.c_str()));
        
        getline(in, speedMean,':');
        data.setSpeedMean(atof (speedMean.c_str()));
        
        getline(in, speedStandardDeviation,':');
        data.setSpeedStandardDeviation(atof (speedStandardDeviation.c_str()));
        
        getline(in, rubbish);
        return in;
}
